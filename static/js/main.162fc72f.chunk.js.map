{"version":3,"sources":["resources/img/logo_gears_drawing_192.png","pages/Overview.tsx","components/navbar/Navbar.tsx","resources/theme.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Overview","useStyles","makeStyles","theme","grow","flexGrow","sideNavMenu","width","sideMenuImage","margin","SideMenuButton","useState","isOpen","setIsOpen","classes","Hidden","lgUp","IconButton","edge","color","aria-label","onClick","Menu","SwipeableDrawer","anchor","open","onClose","onOpen","className","List","ListItem","src","customFitLogo","alt","pageNames","map","pageName","key","button","ListItemText","primary","MenuItems","mdDown","Button","NavBar","title","AppBar","position","Toolbar","Typography","variant","createMuiTheme","palette","main","dark","App","ThemeProvider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,oD,+GCQ5BC,EANE,WACb,OAAO,sC,yHCmBLC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,YAAa,CACTC,MAAO,KAEXC,cAAe,CACXD,MAAO,MACPE,OAAQ,YAqBVC,EAAiB,WAAO,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAEnBC,EAAUb,IAMhB,OAAO,oCACH,kBAACc,EAAA,EAAD,CAAQC,MAAI,GACR,kBAACC,EAAA,EAAD,CACIC,KAAK,QACLC,MAAM,UACNC,aAAW,OACXC,QAVS,WACjBR,GAAWD,KAWH,kBAACU,EAAA,EAAD,QAGR,kBAACC,EAAA,EAAD,CACIC,OAAO,OACPC,KAAMb,EACNc,QAAS,kBAAMb,GAAU,IACzBc,OAAQ,kBAAMd,GAAU,IACxBe,UAAWd,EAAQR,aAEnB,kBAACuB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBACIF,UAAWd,EAAQN,cACnBuB,IAAKC,IACLC,IAAI,qBAGXC,EAAUC,KAAI,SAAAC,GACX,OAAO,kBAACN,EAAA,EAAD,CAAUO,IAAKD,EAAUE,QAAM,GAClC,kBAACC,EAAA,EAAD,CAAcC,QAASJ,YASzCF,EAAY,CAAC,WAAY,WAAY,YAAa,QAAS,YAE3DO,EAAY,WACd,OAAO,oCACH,kBAAC1B,EAAA,EAAD,CAAQ2B,QAAM,GACTR,EAAUC,KAAI,SAAAC,GACX,OAAO,kBAACO,EAAA,EAAD,CAAQN,IAAKD,EAAUjB,MAAM,WAC/BiB,SAONQ,EA5EA,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MACP/B,EAAUb,IAEhB,OAAO,oCACH,kBAAC6C,EAAA,EAAD,CAAQC,SAAS,SACb,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MACfL,GAEL,yBAAKjB,UAAWd,EAAQV,OACxB,kBAAC,EAAD,U,gBC5CHD,EAAQgD,YAAe,CAChCC,QAAS,CACLZ,QAAS,CACLa,KAAM,UACNC,KAAM,cCUHC,MATf,WACE,OAAO,oCACL,kBAACC,EAAA,EAAD,CAAerD,MAAOA,GACpB,kBAAC,EAAD,CAAQ0C,MAAM,aACd,kBAAC,EAAD,SCCAY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCnGjEC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDoBnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIqB,IACpBC,cACA7B,OAAOC,SAAS6B,MAEJC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,cAAN,sBAEP/B,IAgEV,SAAiCO,EAAeC,GAE9C2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OChD/BE,K","file":"static/js/main.162fc72f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_gears_drawing_192.817771b7.png\";","import React from 'react';\r\n\r\nconst Overview = () => {\r\n    return <>\r\n        \r\n    </>\r\n}\r\n\r\nexport default Overview;","import React, { useState } from 'react';\r\nimport { \r\n    AppBar, \r\n    Toolbar, \r\n    IconButton, \r\n    Typography, \r\n    Hidden, \r\n    Button, \r\n    makeStyles, \r\n    SwipeableDrawer, \r\n    ListItem, \r\n    List, \r\n    ListItemText \r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons'\r\n\r\nimport customFitLogo from '../../resources/img/logo_gears_drawing_192.png'\r\n\r\ninterface NavBarProps {\r\n    title: string\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    sideNavMenu: {\r\n        width: 250\r\n    },\r\n    sideMenuImage: {\r\n        width: \"40%\",\r\n        margin: \"auto\"\r\n    },\r\n}));\r\n\r\nconst NavBar = ({title}: NavBarProps) => {\r\n    const classes = useStyles();\r\n\r\n    return <>\r\n        <AppBar position=\"fixed\">\r\n            <Toolbar>\r\n                <SideMenuButton />\r\n                <Typography variant=\"h5\">\r\n                    {title}\r\n                </Typography>\r\n                <div className={classes.grow} />\r\n                <MenuItems />\r\n            </Toolbar>\r\n        </AppBar>\r\n    </>\r\n}\r\n\r\nconst SideMenuButton = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const toggleIsOpen = () => {\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n    return <>\r\n        <Hidden lgUp>\r\n            <IconButton \r\n                edge=\"start\" \r\n                color=\"inherit\" \r\n                aria-label=\"menu\"\r\n                onClick={toggleIsOpen}\r\n            >\r\n                <Menu />\r\n            </IconButton>\r\n        </Hidden>\r\n        <SwipeableDrawer\r\n            anchor=\"left\"\r\n            open={isOpen}\r\n            onClose={() => setIsOpen(false)}\r\n            onOpen={() => setIsOpen(true)}\r\n            className={classes.sideNavMenu}\r\n        >   \r\n            <List>\r\n                <ListItem>\r\n                    <img \r\n                        className={classes.sideMenuImage}\r\n                        src={customFitLogo} \r\n                        alt=\"Custom Fit logo\" \r\n                    />\r\n                </ListItem>\r\n                {pageNames.map(pageName => {\r\n                    return <ListItem key={pageName} button>\r\n                        <ListItemText primary={pageName} />\r\n                    </ListItem>\r\n                })}\r\n                \r\n            </List>\r\n        </SwipeableDrawer>\r\n    </>\r\n}\r\n\r\nconst pageNames = [\"Overview\", \"Routines\", \"Exercises\", \"Stats\", \"Settings\"];\r\n\r\nconst MenuItems = () => {\r\n    return <>\r\n        <Hidden mdDown>\r\n            {pageNames.map(pageName => {\r\n                return <Button key={pageName} color=\"inherit\">\r\n                    {pageName}\r\n                </Button>\r\n            })}\r\n        </Hidden>\r\n    </>\r\n}\r\n\r\nexport default NavBar;","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#2196f3', \r\n            dark: '#1565c0'\r\n        }\r\n    }\r\n});\r\n","import React from 'react';\r\nimport Overview from './pages/Overview';\r\nimport NavBar from './components/navbar/Navbar';\r\nimport { ThemeProvider } from '@material-ui/core';\r\n\r\nimport {theme} from './resources/theme'\r\n\r\nfunction App() {\r\n  return <>\r\n    <ThemeProvider theme={theme}>\r\n      <NavBar title=\"Overview\"/>\r\n      <Overview />\r\n    </ThemeProvider>\r\n  </>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}