{"version":3,"sources":["resources/img/logo_gears_drawing_192.png","components/navbar/Navbar.tsx","pages/Overview.tsx","pages/Exercises.tsx","pages/PageNotFound.tsx","resources/theme.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","grow","flexGrow","sideNavMenu","width","sideMenuImage","margin","FixedAppBar","children","AppBar","position","Toolbar","SideMenuButton","useState","isOpen","setIsOpen","classes","toggleIsOpen","Hidden","lgUp","IconButton","color","aria-label","onClick","Menu","SwipeableDrawer","anchor","open","onClose","onOpen","className","List","ListItem","src","customFitLogo","alt","pageNames","map","pageName","key","button","component","Link","to","process","ListItemText","primary","capitalizeFirstLetter","text","charAt","toUpperCase","slice","MenuItems","mdDown","Button","NavBar","title","Typography","variant","Overview","Exercises","usePageNotFoundStyle","container","textAlign","PageNotFoundContent","paragraph","PageNotFound","createMuiTheme","palette","main","dark","App","ThemeProvider","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,oD,uPCuBrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,YAAa,CACTC,MAAO,KAEXC,cAAe,CACXD,MAAO,MACPE,OAAQ,YAuBVC,EAAc,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,SAElB,OAAO,oCACH,kBAACC,EAAA,EAAD,CAAQC,SAAS,SACb,kBAACC,EAAA,EAAD,KACKH,IAGT,kBAACG,EAAA,EAAD,QAIFC,EAAiB,WAAO,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAEnBC,EAAUlB,IAEVmB,EAAe,WACjBF,GAAWD,IAGf,OAAO,oCACH,kBAACI,EAAA,EAAD,CAAQC,MAAI,GACR,kBAACC,EAAA,EAAD,CACIC,MAAM,UACNC,aAAW,OACXC,QAASN,GAET,kBAACO,EAAA,EAAD,QAGR,kBAACC,EAAA,EAAD,CACIC,OAAO,OACPC,KAAMb,EACNc,QAAS,kBAAMb,GAAU,IACzBc,OAAQ,kBAAMd,GAAU,IACxBe,UAAWd,EAAQb,aAEnB,kBAAC4B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBACIF,UAAWd,EAAQX,cACnB4B,IAAKC,IACLC,IAAI,qBAGXC,EAAUC,KAAI,SAAAC,GACX,OAAO,kBAACN,EAAA,EAAD,CACKO,IAAKD,EACLE,QAAM,EACNC,UAAWC,IACXC,GAAIC,eAA+BN,EACnCf,QAASN,GAEjB,kBAAC4B,EAAA,EAAD,CAAcC,QAASC,EAAsBT,aAS/DF,EAAY,CAAC,WAAY,WAAY,YAAa,QAAS,YAEjE,SAASW,EAAsBC,GAC3B,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAGrD,IAAMC,EAAY,WACd,OAAO,oCACH,kBAAClC,EAAA,EAAD,CAAQmC,QAAM,GACTjB,EAAUC,KAAI,SAAAC,GACX,OAAO,kBAACgB,EAAA,EAAD,CACKf,IAAKD,EACLjB,MAAM,UACNoB,UAAWC,IACXC,GAAIC,eAA+BN,GAE1CS,EAAsBT,UAO5BiB,EAxGA,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MACPxC,EAAUlB,IAEhB,OAAO,oCACH,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC2D,EAAA,EAAD,CAAYC,QAAQ,MACfF,GAEL,yBAAK1B,UAAWd,EAAQf,OACxB,kBAAC,EAAD,SCCG0D,EA7CE,WACb,OAAO,6DACmB,6BADnB,yBAEmB,6BAFnB,yBAGmB,6BAHnB,yBAImB,6BAJnB,yBAKmB,6BALnB,yBAMmB,6BANnB,yBAOmB,6BAPnB,yBAQmB,6BARnB,yBASmB,6BATnB,yBAUmB,6BAVnB,0BAWoB,6BAXpB,0BAYoB,6BAZpB,0BAaoB,6BAbpB,0BAcoB,6BAdpB,0BAeoB,6BAfpB,0BAgBoB,6BAhBpB,0BAiBoB,6BAjBpB,0BAkBoB,6BAlBpB,0BAmBoB,6BAnBpB,0BAoBoB,6BApBpB,0BAqBoB,6BArBpB,0BAsBoB,6BAtBpB,0BAuBoB,6BAvBpB,0BAwBoB,6BAxBpB,0BAyBoB,6BAzBpB,0BA0BoB,6BA1BpB,0BA2BoB,6BA3BpB,0BA4BoB,6BA5BpB,0BA6BoB,6BA7BpB,0BA8BoB,6BA9BpB,0BA+BoB,6BA/BpB,0BAgCoB,6BAhCpB,0BAiCoB,6BAjCpB,0BAkCoB,6BAlCpB,0BAmCoB,6BAnCpB,0BAoCoB,6BApCpB,0BAqCoB,6BArCpB,0BAsCoB,6BAtCpB,0BAuCoB,6BAvCpB,0BAwCoB,+BCnChBC,EANG,WACd,OAAO,oDCCLC,EAAuB9D,YAAW,CACpC+D,UAAW,CACPC,UAAW,YAcbC,EAAsB,WACxB,OAAO,oCACH,kBAACP,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAGA,kBAACD,EAAA,EAAD,CAAYQ,WAAS,GAArB,qFAGA,kBAACX,EAAA,EAAD,CACIjC,MAAM,UACNqC,QAAQ,YACRjB,UAAWC,IACXC,GAAIC,wBAJR,cAWOsB,EA7BM,WACjB,IAAMlD,EAAU6C,IAEhB,OAAO,oCACH,yBAAK/B,UAAWd,EAAQ8C,WACpB,kBAAC,EAAD,S,yBCbC9D,EAAQmE,YAAe,CAChCC,QAAS,CACLtB,QAAS,CACLuB,KAAM,UACNC,KAAM,c,MC+BHC,MA1Bf,WACC,OAAO,oCACN,kBAACC,EAAA,EAAD,CAAexE,MAAOA,GACrB,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOyE,OAAK,EAACC,KAAM9B,eAClB,kBAAC,IAAD,CAAUD,GAAIC,0BAEf,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAM9B,wBAClB,kBAAC,EAAD,CAAQY,MAAM,aACd,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAM9B,yBAClB,kBAAC,EAAD,CAAQY,MAAM,cACd,kBAAC,EAAD,OAED,kBAAC,IAAD,KACC,kBAAC,EAAD,CAAQA,MAAM,KACd,kBAAC,EAAD,YCjBcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDoIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63bbb167.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_gears_drawing_192.817771b7.png\";","import React, { useState } from 'react';\r\nimport { \r\n    AppBar, \r\n    Toolbar, \r\n    IconButton, \r\n    Typography, \r\n    Hidden, \r\n    Button, \r\n    makeStyles, \r\n    SwipeableDrawer, \r\n    ListItem, \r\n    List, \r\n    ListItemText\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons'\r\n\r\nimport customFitLogo from '../../resources/img/logo_gears_drawing_192.png'\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface NavBarProps {\r\n    title: string\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    sideNavMenu: {\r\n        width: 250\r\n    },\r\n    sideMenuImage: {\r\n        width: \"40%\",\r\n        margin: \"auto\"\r\n    },\r\n}));\r\n\r\nconst NavBar = ({title}: NavBarProps) => {\r\n    const classes = useStyles();\r\n\r\n    return <>\r\n        <FixedAppBar>\r\n            <SideMenuButton />\r\n            <Typography variant=\"h5\">\r\n                {title}\r\n            </Typography>\r\n            <div className={classes.grow} />\r\n            <MenuItems />\r\n        </FixedAppBar>\r\n    </>\r\n}\r\n\r\ninterface FixedAppBarProps {\r\n    children: React.ReactNode\r\n}\r\n\r\nconst FixedAppBar = ({children}: FixedAppBarProps) => {\r\n    // The last toolbar takes up the space under the appbar\r\n    return <>\r\n        <AppBar position=\"fixed\">\r\n            <Toolbar>\r\n                {children}\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Toolbar />\r\n    </>\r\n}\r\n\r\nconst SideMenuButton = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const toggleIsOpen = () => {\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n    return <>\r\n        <Hidden lgUp>\r\n            <IconButton \r\n                color=\"inherit\" \r\n                aria-label=\"menu\"\r\n                onClick={toggleIsOpen}\r\n            >\r\n                <Menu />\r\n            </IconButton>\r\n        </Hidden>\r\n        <SwipeableDrawer\r\n            anchor=\"left\"\r\n            open={isOpen}\r\n            onClose={() => setIsOpen(false)}\r\n            onOpen={() => setIsOpen(true)}\r\n            className={classes.sideNavMenu}\r\n        >   \r\n            <List>\r\n                <ListItem>\r\n                    <img \r\n                        className={classes.sideMenuImage}\r\n                        src={customFitLogo} \r\n                        alt=\"Custom Fit logo\" \r\n                    />\r\n                </ListItem>\r\n                {pageNames.map(pageName => {\r\n                    return <ListItem \r\n                                key={pageName} \r\n                                button \r\n                                component={Link} \r\n                                to={process.env.PUBLIC_URL + '/' + pageName}\r\n                                onClick={toggleIsOpen}\r\n                            >\r\n                        <ListItemText primary={capitalizeFirstLetter(pageName)} />\r\n                    </ListItem>\r\n                })}\r\n                \r\n            </List>\r\n        </SwipeableDrawer>\r\n    </>\r\n}\r\n\r\nconst pageNames = [\"overview\", \"routines\", \"exercises\", \"stats\", \"settings\"];\r\n\r\nfunction capitalizeFirstLetter(text: string) {\r\n    return text.charAt(0).toUpperCase() + text.slice(1);\r\n}\r\n\r\nconst MenuItems = () => {\r\n    return <>\r\n        <Hidden mdDown>\r\n            {pageNames.map(pageName => {\r\n                return <Button \r\n                            key={pageName} \r\n                            color=\"inherit\"\r\n                            component={Link} \r\n                            to={process.env.PUBLIC_URL + '/' + pageName}\r\n                        >\r\n                    {capitalizeFirstLetter(pageName)}\r\n                </Button>\r\n            })}\r\n        </Hidden>\r\n    </>\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst Overview = () => {\r\n    return <>\r\n        0 This is an overview <br/>\r\n        1 This is an overview <br/>\r\n        2 This is an overview <br/>\r\n        3 This is an overview <br/>\r\n        4 This is an overview <br/>\r\n        5 This is an overview <br/>\r\n        6 This is an overview <br/>\r\n        7 This is an overview <br/>\r\n        8 This is an overview <br/>\r\n        9 This is an overview <br/>\r\n        10 This is an overview <br/>\r\n        11 This is an overview <br/>\r\n        12 This is an overview <br/>\r\n        13 This is an overview <br/>\r\n        14 This is an overview <br/>\r\n        15 This is an overview <br/>\r\n        16 This is an overview <br/>\r\n        17 This is an overview <br/>\r\n        18 This is an overview <br/>\r\n        19 This is an overview <br/>\r\n        20 This is an overview <br/>\r\n        21 This is an overview <br/>\r\n        22 This is an overview <br/>\r\n        23 This is an overview <br/>\r\n        24 This is an overview <br/>\r\n        25 This is an overview <br/>\r\n        26 This is an overview <br/>\r\n        27 This is an overview <br/>\r\n        28 This is an overview <br/>\r\n        29 This is an overview <br/>\r\n        30 This is an overview <br/>\r\n        31 This is an overview <br/>\r\n        32 This is an overview <br/>\r\n        33 This is an overview <br/>\r\n        34 This is an overview <br/>\r\n        35 This is an overview <br/>\r\n        36 This is an overview <br/>\r\n        37 This is an overview <br/>\r\n        38 This is an overview <br/>\r\n        39 This is an overview <br/>\r\n    </>\r\n}\r\n\r\nexport default Overview;","import React from 'react';\r\n\r\nconst Exercises = () => {\r\n    return <>\r\n        Hello world\r\n    </>\r\n}\r\n\r\nexport default Exercises;\r\n","import React from 'react';\r\nimport { Button, makeStyles, Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst usePageNotFoundStyle = makeStyles({\r\n    container: {\r\n        textAlign: \"center\"\r\n    }\r\n})\r\n\r\nconst PageNotFound = () => {\r\n    const classes = usePageNotFoundStyle();\r\n\r\n    return <>\r\n        <div className={classes.container}>\r\n            <PageNotFoundContent />\r\n        </div>\r\n    </>\r\n}\r\n\r\nconst PageNotFoundContent = () => {\r\n    return <>\r\n        <Typography variant=\"h5\">\r\n            No content found\r\n        </Typography>\r\n        <Typography paragraph>\r\n            This page does not seem to have any content. Consider returning to an other page. \r\n        </Typography>\r\n        <Button \r\n            color=\"primary\" \r\n            variant=\"contained\"\r\n            component={Link} \r\n            to={process.env.PUBLIC_URL + '/overview'}\r\n        >\r\n            Overview\r\n        </Button>\r\n    </>\r\n}\r\n\r\nexport default PageNotFound;","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#2196f3', \r\n            dark: '#1565c0'\r\n        }\r\n    }\r\n});\r\n","import React from 'react';\r\nimport NavBar from './components/navbar/Navbar';\r\nimport Overview from './pages/Overview';\r\nimport Exercises from './pages/Exercises';\r\nimport PageNotFound from './pages/PageNotFound';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\r\n\r\nimport {theme} from './resources/theme'\r\nimport 'typeface-roboto';\r\n\r\nfunction App() {\r\n\treturn <>\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<Router>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path={process.env.PUBLIC_URL} >\r\n\t\t\t\t\t\t<Redirect to={process.env.PUBLIC_URL + '/overview'} />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path={process.env.PUBLIC_URL + '/overview'}>\r\n\t\t\t\t\t\t<NavBar title=\"Overview\" />\r\n\t\t\t\t\t\t<Overview />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path={process.env.PUBLIC_URL + '/exercises'}>\r\n\t\t\t\t\t\t<NavBar title=\"Exercises\" />\r\n\t\t\t\t\t\t<Exercises />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route>\r\n\t\t\t\t\t\t<NavBar title=\"\" />\r\n\t\t\t\t\t\t<PageNotFound />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n\t\t</ThemeProvider>\r\n\t</>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}